@page "/CreateThreadPage"
@using BlazorGroupB.Data
@using BlazorGroupB.Data.DAO;
@using BlazorGroupB.Models
@using System.Text
@using Microsoft.EntityFrameworkCore
@using System.Configuration
@using Npgsql
@using System.Data
@using System.Diagnostics
@inject NavigationManager NaviManager
@inject IJSRuntime JSRuntime

<button class="btn btn-primary" @onclick="BackTopPage">トップページ</button>

<h1>クリエイトスレッドページ</h1>

@* 入力欄 *@
<EditForm Model="@tmc" OnSubmit="OnCreateThread">
    <div class="form-group">
        <label asp-for="tmc.threads.ThreadName" class="control-label"></label>
        <input asp-for="tmc.threads.ThreadName" class="form-control" @bind-value=@tmc.threads.ThreadName />
        <label asp-for="tmc.messages.WriteName" class="control-label"></label>
        <input asp-for="tmc.messages.WriteName" class="form-control" @bind-value=@tmc.messages.WriteName />
        <label asp-for="tmc.messages.DetailMessage" class="control-label"></label>
        <input asp-for="tmc.messages.DetailMessage" class="form-control" @bind-value=@tmc.messages.DetailMessage />
    </div>
    
    <button class="btn btn-primary">thread作成</button>
</EditForm>

<button class="btn btn-primary" @onclick="AllDelete">書き込み内容の削除</button>


@code {
    //  Usersクラスのインスタンス化
    Users user = new Users();
    //  ユーザーIDの保持
    string userdataID = "";

    //  各種Daoクラス。インスタンスは後で行う
    private NpgsqlConnection conn = null;
    private ThreadsDao threadsDao;
    private MessagesDao messagesDao;
    private UsersDao usersDao;

    //  MessagesクラスとThreadsクラスの値を保持するクラスの作成とインスタンス化
    public class ThreadMessageClass
    {
        public Messages? messages { get; set; } = new Messages();
        public Threads? threads { get; set; } = new Threads();
    }
    ThreadMessageClass tmc = new ThreadMessageClass();

    /// <summary>
    /// スレッドとメッセージの書き込み
    /// </summary>
    private void OnCreateThread()
    {
        int number = NewThread();
        NewMessage(number);

        // //  そのurlにジャンプする
        string url = "/ThreadPage/" + number.ToString();
        NaviManager.NavigateTo(url);

    }

    /// <summary>
    /// スレッドを作成する
    /// </summary>
    /// <returns>スレッドID</returns>
    private int NewThread()
    {
        //  作成時刻を追加する
        DateTime dt = DateTime.Now;
        tmc.threads.ThreadCreateDate = dt;

        //  ユーザーIDを追加する
        tmc.threads.UserID = userdataID;

        //  スレッドを作成する
        int number = threadsDao.Insert(tmc.threads);

        return number;
    }

    /// <summary>
    /// メッセージを作成する
    /// </summary>
    /// <param name="number"></param>
    private void NewMessage(int number)
    {
        //  ThreadIDを追加する
        tmc.messages.ThreadID = number;

        //  投稿時間を追加する
        DateTime dt = DateTime.Now;
        tmc.messages.PostTime = dt;

        //  メッセージにUserIDを打ち込む
        tmc.messages.UserID = userdataID;

        //  メッセージを作成する
        messagesDao.Insert(tmc.messages);
    }

    /// <summary>
    /// 最初に起動される
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        //  各種Daoと接続する
        daoConnection();
    }

    /// <summary>
    /// レンダーが終わった後に起動される（OnInitializedAsyncの後）UserIDを作成する
    /// </summary>
    /// <param name="firstRender"></param>
    /// <returns></returns>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        //  UAをuserに追加する
        var remoteUserAgent = await JSRuntime.InvokeAsync<string>("getUserAgent");
        user.UserAgent = remoteUserAgent;
        user.UserCreateDate = DateTime.Now;

        //  Userを作成する
        userdataID = usersDao.Insert(user);
    }

    /// <summary>
    /// 各種Daoと接続する
    /// </summary>
    private void daoConnection()
    {

        var builder = new NpgsqlConnectionStringBuilder
            {
                Host = "localhost",
                Database = "test",
                Username = "postgres",
                Password = "postgres"
            };

        conn = new NpgsqlConnection(
        builder.ConnectionString);

        threadsDao = new ThreadsDao(conn);
        messagesDao = new MessagesDao(conn);
        usersDao = new UsersDao(conn);

    }

    /// <summary>
    /// トップページに戻る
    /// </summary>
    private void BackTopPage()
    {
        StringBuilder sb = new StringBuilder();
        sb.Append("/");
        NaviManager.NavigateTo(sb.ToString(), forceLoad: true);
    }

    /// <summary>
    /// 書き込み内容を全てクリアする
    /// </summary>
    private void AllDelete()
    {
        tmc.threads.ThreadName = "";
        tmc.messages.WriteName = "";
        tmc.messages.DetailMessage = "";
    }
}
