@page "/"
@using BlazorGroupB.Data
@using BlazorGroupB.Data.DAO;
@using BlazorGroupB.Models
@using System.Text
@using Microsoft.EntityFrameworkCore
@using System.Configuration
@using Npgsql
@using System.Data
@using System.Diagnostics
@inject BlazorGroupBDbContext _contextThread
@inject NavigationManager NaviManager

<button class="btn btn-primary" @onclick="ReloadPage">再読み込み</button>
<button class="btn btn-primary" @onclick="NewThread">スレッドの新規投稿</button>

<EditForm Model="@threadsSearch" OnSubmit="SelectSearch">
    <div class="form-group">
        <label asp-for="threadsSearch.searchString" class="control-label"></label>
        <input asp-for="threadsSearch.searchString" class="form-control" @bind-value=@threadsSearch.searchString />
    </div>
    <button class="btn btn-primary">検索ボタン</button>
</EditForm>

@if (Ths != null && !searchbool)
{
    <table class="table">
        <thead>
            <tr>
                <th>ThreadID</th>
                <th>ThreadName</th>

            </tr>
        </thead>

        <tbody>
            @foreach (var item in Ths)
            {
                <tr>

                    <td>@item.ThreadID</td>
                    <td><a href="/ThreadPage/@item.ThreadID">@item.ThreadName</a> </td>

                </tr>
            }
        </tbody>
    </table>
}
else if (searchbool)
{
    <table class="table">
        <thead>
            <tr>
                <th>ThreadID</th>
                <th>ThreadName</th>

            </tr>
        </thead>

        <tbody>
            @foreach (var item in afterSearch)
            {
                <tr>

                    <td>@item.ThreadID</td>
                    <td><a href="/ThreadPage/@item.ThreadID">@item.ThreadName</a> </td>

                </tr>
            }
        </tbody>
    </table>
}
else
{
    <div class="text-primary">No-Data...</div>
}


@* <EditForm Model="@th" OnSubmit="OnCreateThread">
    <div class="form-group">
        <label asp-for="th.ThreadName" class="control-label"></label>
        <input asp-for="th.ThreadName" class="form-control" @bind-value=@th.ThreadName />
    </div>
    <button class="btn btn-primary">thread作成</button>
</EditForm> *@

@code {
    private List<Threads> Ths { get; set; }
    private List<Threads> afterSearch = new List<Threads>();

    // private Threads th = new Threads();

    // private NpgsqlConnection conn = null;
    // private ThreadsDao dao;
    private bool searchbool = false;

    public class ThreadsSearch
    {
        public string searchString { get; set; }
    }
    private ThreadsSearch threadsSearch = new ThreadsSearch();

    // private async void OnCreateThread()
    // {

    //     //  作成時刻を追加する
    //     DateTime dt = DateTime.Now;
    //     th.ThreadCreateDate = dt;

    //     //  ユーザーIDを追加する
    //     th.UserID = "匿名";

    //     //  スレッドを作成する
    //     int number = dao.Insert(th);

    //     // //  そのurlにジャンプする
    //     string url = "/ThreadPage/" + number.ToString();
    //     NaviManager.NavigateTo(url);

    // }

    /// <summary>
    /// 開かれたら最初に起動される
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        //  データベースからデータを取り出す
        Ths = await _contextThread.Threads.ToListAsync<Threads>();
        // daoConnection();

    }
    // private void daoConnection()
    // {

    //     var builder = new NpgsqlConnectionStringBuilder
    //     {
    //         Host = "localhost",
    //         Database = "test",
    //         Username = "postgres",
    //         Password = "postgres"
    //     };

    //     conn = new NpgsqlConnection(
    //     builder.ConnectionString);

    //     // conn = new NpgsqlConnection(
    //     // ConfigurationManager.ConnectionStrings
    //     // ["PosgreConnection"].ConnectionString);

    //     dao = new ThreadsDao(conn);
    // }
    public void ReloadPage()
    {
        StringBuilder sb = new StringBuilder();
        sb.Append("/");
        NaviManager.NavigateTo(sb.ToString(), forceLoad: true);
    }
    public void NewThread()
    {
        StringBuilder sb = new StringBuilder();
        sb.Append("/CreateThreadPage");
        NaviManager.NavigateTo(sb.ToString(), forceLoad: true);
    }
    public void SelectSearch()
    {
        afterSearch = Ths.FindAll(x => x.ThreadName.Contains(threadsSearch.searchString));
        searchbool = true;
    }
}
