@page "/"
@using BlazorGroupB.Data
@using BlazorGroupB.Data.DAO;
@using BlazorGroupB.Models
@using System.Text
@using Microsoft.EntityFrameworkCore
@using System.Configuration
@using Npgsql
@using System.Data
@using System.Diagnostics
@inject BlazorGroupBDbContext _contextThread
@inject NavigationManager NaviManager

@* 各種ボタン *@
<button class="btn btn-primary" @onclick="DoFortuneTelling">占い</button>
<button class="btn btn-primary" @onclick="ReloadPage">再読み込み</button>
<button class="btn btn-primary" @onclick="NewThread">スレッドの新規投稿</button>

@* 検索機能 *@
<div class="form-group">
    <label>
        User:
        <input @bind="searchString" />
    </label>
</div>
<button @onclick="SelectSearch" >検索ボタン</button>

@* スレッド一覧の表示 *@
@if (Ths != null && !searchbool)
{
    <table class="table">
        <thead>
            <tr>
                <th>ThreadID</th>
                <th>ThreadName</th>
            </tr>
        </thead>

        <tbody>
            @foreach (var item in Ths)
            {
                <tr>

                    <td>@item.ThreadID</td>
                    <td><a href="/ThreadPage/@item.ThreadID">@item.ThreadName</a> </td>
                </tr>
            }
        </tbody>
    </table>
}
@* 検索後の表示 *@
else if (searchbool)
{
    <table class="table">
        <thead>
            <tr>
                <th>ThreadID</th>
                <th>ThreadName</th>

            </tr>
        </thead>

        <tbody>
            @foreach (var item in afterSearch)
            {
                <tr>

                    <td>@item.ThreadID</td>
                    <td><a href="/ThreadPage/@item.ThreadID">@item.ThreadName</a> </td>

                </tr>
            }
        </tbody>
    </table>
}
else
{
    <div class="text-primary">No-Data...</div>
}



@code {
    //  スレッド一覧のデータを保持するList
    private List<Threads> Ths { get; set; }

    //  検索後のスレッド一覧のデータを保持するList
    private List<Threads> afterSearch = new List<Threads>();

    //  検索が行われたのかを判定するbool
    private bool searchbool = false;

    //  検索文字の保持
    string searchString;

    /// <summary>
    /// 開かれたら最初に起動される
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        //  データベースからデータを取り出す
        Ths = await _contextThread.Threads.ToListAsync<Threads>();

    }

    /// <summary>
    /// ページの再読み込み
    /// </summary>
    public void ReloadPage()
    {
        StringBuilder sb = new StringBuilder();
        sb.Append("/");
        NaviManager.NavigateTo(sb.ToString(), forceLoad: true);
    }

    /// <summary>
    /// 新規スレッド作成ページに移る
    /// </summary>
    public void NewThread()
    {
        StringBuilder sb = new StringBuilder();
        sb.Append("/CreateThreadPage");
        NaviManager.NavigateTo(sb.ToString(), forceLoad: true);
    }

    /// <summary>
    /// スレッド一覧からの検索
    /// </summary>
    public void SelectSearch()
    {
        afterSearch = Ths.FindAll(x => x.ThreadName.Contains(searchString));
        searchbool = true;
    }

    /// <summary>
    /// 占いを行う
    /// </summary>
    public void DoFortuneTelling()
    {
        StringBuilder sb = new StringBuilder();
        sb.Append("/UranaiPage");
        NaviManager.NavigateTo(sb.ToString(), forceLoad: true);
    }
}
