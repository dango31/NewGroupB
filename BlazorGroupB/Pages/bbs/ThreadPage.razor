@page "/ThreadPage/{CodeID?}"
@using BlazorGroupB.Data
@using BlazorGroupB.Data.DAO;
@using BlazorGroupB.Models
@using System.Text
@using Microsoft.EntityFrameworkCore
@using System.Configuration
@using Npgsql
@using System.Data
@using System.Diagnostics
@using Microsoft.AspNetCore.Mvc.Rendering
@using Microsoft.AspNetCore.SignalR.Client
@implements IAsyncDisposable
@inject BlazorGroupBDbContext _context
@inject NavigationManager NaviManager
@inject IJSRuntime JSRuntime

<button class="btn btn-primary" @onclick="BackTopPage">トップページ</button>
<button class="btn btn-primary" @onclick="ReloadPage">再読み込み</button>


@if (Msgs != null && int.TryParse(CodeID, out int number))
{
    <table class="table">
        <thead>
            <tr>
                <th>MessageID</th>
                <th>本文DetailMessage</th>
                <th>UserID</th>
            </tr>
        </thead>

        <tbody>
            @foreach (Messages item in Msgs)
            {
                <tr>
                     <th>@item.MessageID</th> 
                     <td>@item.DetailMessage</td> 
                     <td>@item.UserID</td>
                </tr>
            }
        </tbody>
    </table>
}
else
{

}

<EditForm Model="@msg" OnSubmit="Send">
    <div class="form-group">
        <label asp-for="msg.DetailMessage" class="control-label"></label>
        <input asp-for="msg.DetailMessage" class="form-control" @bind-value=@msg.DetailMessage />
        <label asp-for="msg.WriteName" class="control-label"></label>
        <input asp-for="msg.WriteName" class="form-control" @bind-value=@msg.WriteName />
    </div>
    <button class="btn btn-primary">Message送信</button>
</EditForm>


@code {
    [Parameter]
    public string CodeID { get; set; }

    private List<Messages> Msgs { get; set; } = new List<Messages>();
    Messages msg = new Messages();
    Users user = new Users();
    string userdataID = "";

    private NpgsqlConnection conn = null;
    private MessagesDao messagesDao;
    private UsersDao usersDao;

    //  追加
    private HubConnection? hubConnection;

    private async void PostMessage()
    {
        //  ThreadIDを追加する
        if (int.TryParse(CodeID, out int number))
        {
            msg.ThreadID = number;
        }
        else
        {
            msg.ThreadID = 0;
        }

        //  投稿時間を追加する
        DateTime dt = DateTime.Now;
        msg.PostTime = dt;

        //  メッセージにUserIDを打ち込む
        msg.UserID = userdataID;

        //  メッセージを作成する
        messagesDao.Insert(msg);

        ReloadPage();
    }

    private void daoConnection()
    {
        var builder = new NpgsqlConnectionStringBuilder
            {
                Host = "localhost",
                Database = "test",
                Username = "postgres",
                Password = "postgres"
            };
        conn = new NpgsqlConnection(builder.ConnectionString);
        messagesDao = new MessagesDao(conn);
        usersDao = new UsersDao(conn);
    }
    public void BackTopPage()
    {
        StringBuilder sb = new StringBuilder();
        sb.Append("/");
        NaviManager.NavigateTo(sb.ToString(), forceLoad: true);
    }
    private void ReloadPage()
    {
        StringBuilder sb = new StringBuilder();
        sb.Append("/ThreadPage/")
            .Append(CodeID);
        NaviManager.NavigateTo(sb.ToString(), forceLoad: true);
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

            daoConnection();
            //  UAをuserに追加する
            var remoteUserAgent = await JSRuntime.InvokeAsync<string>("getUserAgent");
            user.UserAgent = remoteUserAgent;
            user.UserCreateDate = DateTime.Now;

            //  Userを作成する
            userdataID = usersDao.Insert(user);

    }

    //追加項目

    protected override async Task OnInitializedAsync()
    {
        //  ハブコネクションの接続の構築
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NaviManager.ToAbsoluteUri("/chathub"))
            .Build();

        //  受信したデータをメッセージリストに追加している
        //  最後にInvokeAsync(StateHasChanged)を呼び出すことで
        // blazorに通知され、UIが更新される
        hubConnection.On<Messages>("ReceiveMessage", (msg) =>
        {
            Msgs.Add(msg);
            InvokeAsync(StateHasChanged);
        });
        //  データベースから値を取り出す
        if (int.TryParse(CodeID, out int number))
        {
            try
            {
                Msgs = await _context.Messages.Where(m => m.ThreadID == number).ToListAsync<Messages>();
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.Message);
            }

        }
        else
        {
            Msgs = await _context.Messages.ToListAsync<Messages>();
        }
        await hubConnection.StartAsync();
    }

    //  Hubに送信します
    private async Task Send()
    {
        PostMessage();

        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessage", msg);
        }
    }

    //  Sendボタンが有効か無効かの判定
    public bool IsConnected =>
    hubConnection?.State == HubConnectionState.Connected;

    //  不要のリソースを解放し、メモリリークを防ぐために重要
    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
